#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_MembersPool.headers.fc";
#include "tact_MembersPool.stdlib.fc";
#include "tact_MembersPool.storage.fc";

;;
;; Contract MembersPool functions
;;

(int, slice) $MembersPool$_contract_init(slice $master) impure inline_ref {
    var (($self'totalIncome, $self'master)) = (0, null());
    $self'master = $master;
    return ($self'totalIncome, $self'master);
}

((int, slice), (int, slice)) $MembersPool$_fun_poolData((int, slice) $self) impure inline_ref {
    var (($self'totalIncome, $self'master)) = $self;
    var $fresh$ret_9 = $PoolData$_constructor_totalIncome_master($self'totalIncome, $self'master);
    return (($self'totalIncome, $self'master), $fresh$ret_9);
}

;;
;; Receivers of a Contract MembersPool
;;

(((int, slice)), ()) $MembersPool$_internal_binary_AddIncome((int, slice) $self, (int) $msg) impure inline {
    var ($self'totalIncome, $self'master) = $self;
    var ($msg'amount) = $msg;
    throw_unless(48540, ($Context$_get_value(__tact_context_get()) >= ($msg'amount + $Context$_fun_readForwardFee(__tact_context_get()))));
    $self'totalIncome = $self'totalIncome + $msg'amount;
    return (($self'totalIncome, $self'master), ());
}

(((int, slice)), ()) $MembersPool$_internal_binary_SendIncome((int, slice) $self, (int, int, slice, int) $msg) impure inline {
    var ($self'totalIncome, $self'master) = $self;
    var ($msg'totalSupply, $msg'totalVoted, $msg'wallet, $msg'poolWithdrawnAt) = $msg;
    throw_unless(11184, ( __tact_slice_eq_bits($self'master, __tact_context_get_sender()) ));
    int $pie = (($self'totalIncome - $msg'poolWithdrawnAt) / (100 * ($msg'totalSupply / $msg'totalVoted)));
    if (($msg'poolWithdrawnAt == 0)) {
        $pie = 0;
    }
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'wallet, $pie, 1, $PoolIncome$_store_cell($PoolIncome$_constructor_poolWithdrawnAt($self'totalIncome))));
    return (($self'totalIncome, $self'master), ());
}

;;
;; Get methods of a Contract MembersPool
;;

_ %poolData() method_id(78143) {
    var self = $MembersPool$_contract_load();
    var res = self~$MembersPool$_fun_poolData();
    return $PoolData$_to_external(res);
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract MembersPool
;;

((int, slice), int) $MembersPool$_contract_router_internal((int, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive AddIncome message
    if (op == 2399678173) {
        var msg = in_msg~$AddIncome$_load();
        self~$MembersPool$_internal_binary_AddIncome(msg);
        return (self, true);
    }
    
    ;; Receive SendIncome message
    if (op == 3775197011) {
        var msg = in_msg~$SendIncome$_load();
        self~$MembersPool$_internal_binary_SendIncome(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $MembersPool$_contract_load();
    
    ;; Handle operation
    int handled = self~$MembersPool$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $MembersPool$_contract_store(self);
}
