;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

;;
;; Type: PoolData
;; TLB: _ totalIncome:coins master:address = PoolData
;;

(int, slice) $PoolData$_to_external(((int, slice)) v) inline {
    var (v'totalIncome, v'master) = v; 
    return (v'totalIncome, v'master);
}

((int, slice)) $PoolData$_constructor_totalIncome_master(int $totalIncome, slice $master) inline {
    return ($totalIncome, $master);
}

;;
;; Type: AddIncome
;; Header: 0x8f082edd
;; TLB: add_income#8f082edd amount:coins = AddIncome
;;

(slice, ((int))) $AddIncome$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2399678173);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: SendIncome
;; Header: 0xe104ef53
;; TLB: send_income#e104ef53 totalSupply:coins totalVoted:coins wallet:address poolWithdrawnAt:coins = SendIncome
;;

(slice, ((int, int, slice, int))) $SendIncome$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3775197011);
    var v'totalSupply = sc_0~load_coins();
    var v'totalVoted = sc_0~load_coins();
    var v'wallet = sc_0~__tact_load_address();
    var v'poolWithdrawnAt = sc_0~load_coins();
    return (sc_0, (v'totalSupply, v'totalVoted, v'wallet, v'poolWithdrawnAt));
}

;;
;; Type: PoolIncome
;; Header: 0xa4400a99
;; TLB: pool_income#a4400a99 poolWithdrawnAt:coins = PoolIncome
;;

builder $PoolIncome$_store(builder build_0, (int) v) inline {
    var (v'poolWithdrawnAt) = v;
    build_0 = store_uint(build_0, 2755660441, 32);
    build_0 = build_0.store_coins(v'poolWithdrawnAt);
    return build_0;
}

cell $PoolIncome$_store_cell((int) v) inline {
    return $PoolIncome$_store(begin_cell(), v).end_cell();
}

((int)) $PoolIncome$_constructor_poolWithdrawnAt(int $poolWithdrawnAt) inline {
    return ($poolWithdrawnAt);
}

;;
;; Type: MembersPool
;;

builder $MembersPool$_store(builder build_0, (int, slice) v) inline {
    var (v'totalIncome, v'master) = v;
    build_0 = build_0.store_coins(v'totalIncome);
    build_0 = __tact_store_address(build_0, v'master);
    return build_0;
}

(slice, ((int, slice))) $MembersPool$_load(slice sc_0) inline {
    var v'totalIncome = sc_0~load_coins();
    var v'master = sc_0~__tact_load_address();
    return (sc_0, (v'totalIncome, v'master));
}

(slice, ((slice))) $MembersPool$init$_load(slice sc_0) inline {
    var v'master = sc_0~__tact_load_address();
    return (sc_0, (v'master));
}

(int, slice) $MembersPool$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$MembersPool$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $master) = $sc~$MembersPool$init$_load();
        $sc.end_parse();
        return $MembersPool$_contract_init($master);
    }
}

() $MembersPool$_contract_store((int, slice) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $MembersPool$_store(b, v);
    set_data(b.end_cell());
}