#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_TokenMaster.headers.fc";
#include "tact_TokenMaster.stdlib.fc";
#include "tact_TokenMaster.storage.fc";

;;
;; Contract TokenMaster functions
;;

(int, int, slice, cell, cell) $TokenMaster$_contract_init(slice $owner, cell $jetton_content) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice)) = (0, true, null(), null(), null());
    $self'owner = $owner;
    $self'jetton_content = $jetton_content;
    $self'subscribePrice~__tact_dict_set_int_cell(257, 0, $Level$_store_cell($Level$_constructor_jettons_price(100000000000, 100000000)));
    $self'subscribePrice~__tact_dict_set_int_cell(257, 1, $Level$_store_cell($Level$_constructor_jettons_price(300000000000, 300000000)));
    $self'subscribePrice~__tact_dict_set_int_cell(257, 2, $Level$_store_cell($Level$_constructor_jettons_price(500000000000, 500000000)));
    $self'subscribePrice~__tact_dict_set_int_cell(257, 3, $Level$_store_cell($Level$_constructor_jettons_price(1000000000000, 1000000000)));
    $self'subscribePrice~__tact_dict_set_int_cell(257, 4, $Level$_store_cell($Level$_constructor_jettons_price(4000000000000, 3000000000)));
    return ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice);
}

((int, int, slice, cell, cell), (int, int, slice, cell, cell, slice)) $TokenMaster$_fun_get_jetton_data((int, int, slice, cell, cell) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice)) = $self;
    slice $pool = $global_contractAddress($MembersPool$_init_child(__tact_context_sys, $global_myAddress()));
    var $fresh$ret_17 = $MasterData$_constructor_pool_total_supply_mintable_owner_jetton_content_jetton_wallet_code($pool, $self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $StateInit$_get_code($TokenWallet$_init_child(__tact_context_sys, $self'owner, $global_myAddress())));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), $fresh$ret_17);
}

((int, int, slice, cell, cell), cell) $TokenMaster$_fun_subscribePrice((int, int, slice, cell, cell) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice)) = $self;
    var $fresh$ret_18 = $self'subscribePrice;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), $fresh$ret_18);
}

((int, int, slice, cell, cell), slice) $TokenMaster$_fun_get_wallet_address((int, int, slice, cell, cell) $self, slice $owner_address) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice)) = $self;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $owner_address, $global_myAddress());
    var $fresh$ret_19 = $global_contractAddress(($init'code, $init'data));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), $fresh$ret_19);
}

((int, int, slice, cell, cell), slice) $TokenMaster$_fun_poolAddress((int, int, slice, cell, cell) $self) impure inline_ref {
    var (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice)) = $self;
    var $fresh$ret_20 = $global_contractAddress($MembersPool$_init_child(__tact_context_sys, $global_myAddress()));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), $fresh$ret_20);
}

;;
;; Receivers of a Contract TokenMaster
;;

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_ChangeContent((int, int, slice, cell, cell) $self, (cell) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'jetton_content) = $msg;
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'jetton_content = $msg'jetton_content;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_ChangeOwner((int, int, slice, cell, cell) $self, (slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'owner) = $msg;
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'owner = $msg'owner;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_ChangeSubscribePrice((int, int, slice, cell, cell) $self, (cell) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'subscribePrice) = $msg;
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'subscribePrice = $msg'subscribePrice;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_Transfer((int, int, slice, cell, cell) $self, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'query_id, $msg'amount, $msg'destination, $msg'response_destination, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    throw_unless(49345, $self'mintable);
    throw_unless(51724, ((($Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) + 10000000) + $msg'forward_ton_amount) < $ctx'value));
    $self'total_supply = ($self'total_supply + $msg'amount);
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'destination, $global_myAddress());
    slice $to = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($to, 0, 64, false, $InternalTransfer$_store_cell($InternalTransfer$_constructor_query_id_amount_from_response_destination_forward_ton_amount_forward_payload($msg'query_id, $msg'amount, $self'owner, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload)), $init'data, $init'code));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_Subscribe((int, int, slice, cell, cell) $self, (int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'lvl) = $msg;
    var ($data'jettons, $data'price) = $Level$_not_null($Level$_load_opt(__tact_dict_get_int_cell($self'subscribePrice, 257, $msg'lvl)));
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, __tact_context_get_sender(), $global_myAddress());
    slice $to = $global_contractAddress(($init'code, $init'data));
    throw_unless(41747, ($data'price > 0));
    throw_unless(51724, ($Context$_get_value(__tact_context_get()) >= (($data'price + $Context$_fun_readForwardFee(__tact_context_get())) + 100000000)));
    $self'total_supply = ((($self'total_supply + $data'jettons) + ($data'jettons / 10)) + ($data'jettons / 20));
    int $sendValue = (($data'price / 10) + ($data'price / 20));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_data_code($to, ($sendValue + 100000000), 0, false, $UpdateSubscribe$_store_cell($UpdateSubscribe$_constructor_jettons_price($data'jettons, $data'price)), $init'data, $init'code));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_MintVots((int, int, slice, cell, cell) $self, (slice, int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'sender, $msg'amount) = $msg;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'sender, $global_myAddress());
    slice $to = $global_contractAddress(($init'code, $init'data));
    throw_unless(4429, ( __tact_slice_eq_bits($to, __tact_context_get_sender()) ));
    $self'total_supply = ($self'total_supply + $msg'amount);
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_ProvideWalletAddress((int, int, slice, cell, cell) $self, (int, slice, int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'query_id, $msg'owner_address, $msg'include_address) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    slice $wallet = $global_contractAddress($TokenWallet$_init_child(__tact_context_sys, $msg'owner_address, $global_myAddress()));
    slice $owner_address = null();
    if ($msg'include_address) {
        $owner_address = $msg'owner_address;
    }
    $global_send($SendParameters$_constructor_to_value_mode_body($ctx'sender, 0, 64, $TakeWalletAddress$_store_cell($TakeWalletAddress$_constructor_query_id_wallet_address_owner_address($msg'query_id, $wallet, $owner_address))));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_CheckWallet((int, int, slice, cell, cell) $self, (slice, slice, int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'wallet, $msg'sender, $msg'amount) = $msg;
    slice $wallet = $global_contractAddress($TokenWallet$_init_child(__tact_context_sys, $msg'sender, $global_myAddress()));
    if (( __tact_slice_eq_bits($wallet, $msg'wallet) )) {
        $global_send($SendParameters$_constructor_to_value_mode_body($wallet, 50000000, 0, $AddVots$_store_cell($AddVots$_constructor_amount($msg'amount))));
        $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 64, $Validate$_store_cell($Validate$_constructor_wallet_sender_amount($wallet, $msg'sender, $msg'amount))));
    }
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

((int, int, slice, cell, cell), ()) $TokenMaster$_internal_text_a2f43c647fca1834ba717617790fa8ce6fe6ee0cb77d0b3ef0a89a93b33176f2((int, int, slice, cell, cell) $self) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'mintable = false;
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_BurnNotification((int, int, slice, cell, cell) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'query_id, $msg'amount, $msg'sender, $msg'response_destination) = $msg;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'sender, $global_myAddress());
    throw_unless(4429, ( __tact_slice_eq_bits(__tact_context_get_sender(), $global_contractAddress(($init'code, $init'data))) ));
    $self'total_supply = ($self'total_supply - $msg'amount);
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_destination, 0, 64, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_CheckSupply((int, int, slice, cell, cell) $self, (int, slice, int) $msg) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($msg'totalVoted, $msg'sender, $msg'poolWithdrawnAt) = $msg;
    var ($init'code, $init'data) = $TokenWallet$_init_child(__tact_context_sys, $msg'sender, $global_myAddress());
    slice $from = $global_contractAddress(($init'code, $init'data));
    throw_unless(4429, ( __tact_slice_eq_bits($from, __tact_context_get_sender()) ));
    slice $poolAddress = $global_contractAddress($MembersPool$_init_child(__tact_context_sys, $global_myAddress()));
    $global_send($SendParameters$_constructor_to_value_mode_body($poolAddress, 0, 64, $SendIncome$_store_cell($SendIncome$_constructor_totalSupply_poolWithdrawnAt_totalVoted_wallet($self'total_supply, $msg'poolWithdrawnAt, $msg'totalVoted, $from))));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

(((int, int, slice, cell, cell)), ()) $TokenMaster$_internal_binary_Deploy((int, int, slice, cell, cell) $self, (int) $deploy) impure inline {
    var ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice)~$TokenMaster$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'total_supply, $self'mintable, $self'owner, $self'jetton_content, $self'subscribePrice), ());
}

;;
;; Get methods of a Contract TokenMaster
;;

_ %get_jetton_data() method_id(106029) {
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_get_jetton_data();
    return $MasterData$_to_external(res);
}

_ %subscribePrice() method_id(129822) {
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_subscribePrice();
    return res;
}

_ %get_wallet_address(slice $owner_address) method_id(103289) {
    slice $owner_address = __tact_verify_address($owner_address);
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_get_wallet_address($owner_address);
    return res;
}

_ %poolAddress() method_id(80604) {
    var self = $TokenMaster$_contract_load();
    var res = self~$TokenMaster$_fun_poolAddress();
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TokenMaster
;;

((int, int, slice, cell, cell), int) $TokenMaster$_contract_router_internal((int, int, slice, cell, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive ChangeContent message
    if (op == 274271986) {
        var msg = in_msg~$ChangeContent$_load();
        self~$TokenMaster$_internal_binary_ChangeContent(msg);
        return (self, true);
    }
    
    ;; Receive ChangeOwner message
    if (op == 2242002949) {
        var msg = in_msg~$ChangeOwner$_load();
        self~$TokenMaster$_internal_binary_ChangeOwner(msg);
        return (self, true);
    }
    
    ;; Receive ChangeSubscribePrice message
    if (op == 258417304) {
        var msg = in_msg~$ChangeSubscribePrice$_load();
        self~$TokenMaster$_internal_binary_ChangeSubscribePrice(msg);
        return (self, true);
    }
    
    ;; Receive Transfer message
    if (op == 0xf8a7ea5) {
        var msg = in_msg~$Transfer$_load();
        self~$TokenMaster$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive Subscribe message
    if (op == 462151548) {
        var msg = in_msg~$Subscribe$_load();
        self~$TokenMaster$_internal_binary_Subscribe(msg);
        return (self, true);
    }
    
    ;; Receive MintVots message
    if (op == 2849257298) {
        var msg = in_msg~$MintVots$_load();
        self~$TokenMaster$_internal_binary_MintVots(msg);
        return (self, true);
    }
    
    ;; Receive ProvideWalletAddress message
    if (op == 0x2c76b973) {
        var msg = in_msg~$ProvideWalletAddress$_load();
        self~$TokenMaster$_internal_binary_ProvideWalletAddress(msg);
        return (self, true);
    }
    
    ;; Receive CheckWallet message
    if (op == 2217665637) {
        var msg = in_msg~$CheckWallet$_load();
        self~$TokenMaster$_internal_binary_CheckWallet(msg);
        return (self, true);
    }
    
    ;; Receive BurnNotification message
    if (op == 0x7bdd97de) {
        var msg = in_msg~$BurnNotification$_load();
        self~$TokenMaster$_internal_binary_BurnNotification(msg);
        return (self, true);
    }
    
    ;; Receive CheckSupply message
    if (op == 634001287) {
        var msg = in_msg~$CheckSupply$_load();
        self~$TokenMaster$_internal_binary_CheckSupply(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$TokenMaster$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    ;; Text Receivers
    if (op == 0) {
        var text_op = slice_hash(in_msg);
        
        ;; Receive "Stop Mint" message
        if (text_op == 0xa2f43c647fca1834ba717617790fa8ce6fe6ee0cb77d0b3ef0a89a93b33176f2) {
            self~$TokenMaster$_internal_text_a2f43c647fca1834ba717617790fa8ce6fe6ee0cb77d0b3ef0a89a93b33176f2();
            return (self, true);
        }
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TokenMaster$_contract_load();
    
    ;; Handle operation
    int handled = self~$TokenMaster$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TokenMaster$_contract_store(self);
}
