;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

;;
;; Type: Data
;; TLB: _ title:^string description:^string image:^string link:^string = Data
;;

builder $Data$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'title, v'description, v'image, v'link) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'title).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'description).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'image).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'link).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice))) $Data$_load(slice sc_0) inline {
    var v'title = sc_0~load_ref().begin_parse();
    var v'description = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'image = sc_1~load_ref().begin_parse();
    var v'link = sc_1~load_ref().begin_parse();
    return (sc_0, (v'title, v'description, v'image, v'link));
}

((slice, slice, slice, slice)) $Data$_constructor_title_description_image_link(slice $title, slice $description, slice $image, slice $link) inline {
    return ($title, $description, $image, $link);
}

;;
;; Type: DonationData
;; TLB: _ donated:uint32 deployer:address id:uint64 owner:address data:Data{title:^string,description:^string,image:^string,link:^string} = DonationData
;;

(int, slice, int, slice, (slice, slice, slice, slice)) $DonationData$_to_external(((int, slice, int, slice, (slice, slice, slice, slice))) v) inline {
    var (v'donated, v'deployer, v'id, v'owner, v'data) = v; 
    return (v'donated, v'deployer, v'id, v'owner, v'data);
}

((int, slice, int, slice, (slice, slice, slice, slice))) $DonationData$_constructor_donated_deployer_id_owner_data(int $donated, slice $deployer, int $id, slice $owner, (slice, slice, slice, slice) $data) inline {
    return ($donated, $deployer, $id, $owner, $data);
}

;;
;; Type: DeployDonation
;; Header: 0xef6f5d2a
;; TLB: deploy_donation#ef6f5d2a data:Data{title:^string,description:^string,image:^string,link:^string} owner:address = DeployDonation
;;

(slice, (((slice, slice, slice, slice), slice))) $DeployDonation$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4017052970);
    var v'data = sc_0~$Data$_load();
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'data, v'owner));
}

;;
;; Type: Donate
;; Header: 0x41146546
;; TLB: donate#41146546 amount:coins = Donate
;;

(slice, ((int))) $Donate$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1091855686);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: DonationEvent
;; Header: 0x127c35a5
;; TLB: donation_event#127c35a5 amount:coins from:address = DonationEvent
;;

builder $DonationEvent$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'from) = v;
    build_0 = store_uint(build_0, 310130085, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    return build_0;
}

cell $DonationEvent$_store_cell((int, slice) v) inline {
    return $DonationEvent$_store(begin_cell(), v).end_cell();
}

((int, slice)) $DonationEvent$_constructor_amount_from(int $amount, slice $from) inline {
    return ($amount, $from);
}

;;
;; Type: NewDonation
;; Header: 0xc83f5563
;; TLB: new_donation#c83f5563 address:address id:uint64 owner:address data:Data{title:^string,description:^string,image:^string,link:^string} = NewDonation
;;

builder $NewDonation$_store(builder build_0, (slice, int, slice, (slice, slice, slice, slice)) v) inline {
    var (v'address, v'id, v'owner, (v'data'title, v'data'description, v'data'image, v'data'link)) = v;
    build_0 = store_uint(build_0, 3359593827, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_uint(v'id, 64);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = $Data$_store(build_0, (v'data'title, v'data'description, v'data'image, v'data'link));
    return build_0;
}

cell $NewDonation$_store_cell((slice, int, slice, (slice, slice, slice, slice)) v) inline {
    return $NewDonation$_store(begin_cell(), v).end_cell();
}

((slice, int, slice, (slice, slice, slice, slice))) $NewDonation$_constructor_address_id_owner_data(slice $address, int $id, slice $owner, (slice, slice, slice, slice) $data) inline {
    return ($address, $id, $owner, $data);
}

;;
;; Type: ChangeActive
;; Header: 0x41c3d5cb
;; TLB: change_active#41c3d5cb active:bool = ChangeActive
;;

(slice, ((int))) $ChangeActive$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1103353291);
    var v'active = sc_0~load_int(1);
    return (sc_0, (v'active));
}

;;
;; Type: Donation
;;

builder $Donation$_store(builder build_0, (int, slice, int, slice, (slice, slice, slice, slice), int) v) inline {
    var (v'donated, v'deployer, v'id, v'owner, (v'data'title, v'data'description, v'data'image, v'data'link), v'active) = v;
    build_0 = build_0.store_coins(v'donated);
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_uint(v'id, 64);
    build_0 = __tact_store_address(build_0, v'owner);
    var build_1 = begin_cell();
    build_1 = $Data$_store(build_1, (v'data'title, v'data'description, v'data'image, v'data'link));
    build_1 = build_1.store_int(v'active, 1);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((int, slice, int, slice, (slice, slice, slice, slice), int))) $Donation$_load(slice sc_0) inline {
    var v'donated = sc_0~load_coins();
    var v'deployer = sc_0~__tact_load_address();
    var v'id = sc_0~load_uint(64);
    var v'owner = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'data = sc_1~$Data$_load();
    var v'active = sc_1~load_int(1);
    return (sc_0, (v'donated, v'deployer, v'id, v'owner, v'data, v'active));
}

(slice, ((slice, int))) $Donation$init$_load(slice sc_0) inline {
    var v'deployer = sc_0~__tact_load_address();
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'deployer, v'id));
}

(int, slice, int, slice, (slice, slice, slice, slice), int) $Donation$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Donation$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $deployer, int $id) = $sc~$Donation$init$_load();
        $sc.end_parse();
        return $Donation$_contract_init($deployer, $id);
    }
}

() $Donation$_contract_store((int, slice, int, slice, (slice, slice, slice, slice), int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Donation$_store(b, v);
    set_data(b.end_cell());
}