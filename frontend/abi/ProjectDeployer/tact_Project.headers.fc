;;
;; Header files for Project
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_get_int_int
int __tact_dict_get_int_int(cell d, int kl, int k, int vl) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Data$_store
builder $Data$_store(builder build_0, (slice, slice, slice, slice) v) inline;

;; $Data$_load
(slice, ((slice, slice, slice, slice))) $Data$_load(slice sc_0) inline;

;; $NewProject$_store
builder $NewProject$_store(builder build_0, (slice, int, (slice, slice, slice, slice), slice, int, cell) v) inline_ref;

;; $NewProject$_store_cell
cell $NewProject$_store_cell((slice, int, (slice, slice, slice, slice), slice, int, cell) v) inline;

;; $DeployProject$_load
(slice, (((slice, slice, slice, slice), int, cell, slice))) $DeployProject$_load(slice sc_0) inline;

;; $StageChanged$_store
builder $StageChanged$_store(builder build_0, (int) v) inline;

;; $StageChanged$_store_cell
cell $StageChanged$_store_cell((int) v) inline;

;; $CheckWallet$_store
builder $CheckWallet$_store(builder build_0, (slice, slice, int) v) inline;

;; $CheckWallet$_store_cell
cell $CheckWallet$_store_cell((slice, slice, int) v) inline;

;; $ChangeStage$_load
(slice, ((int))) $ChangeStage$_load(slice sc_0) inline;

;; $OwnerWithdraw$_load
(slice, ((int))) $OwnerWithdraw$_load(slice sc_0) inline;

;; $AddIncome$_load
(slice, ((int, int))) $AddIncome$_load(slice sc_0) inline;

;; $TransferNotification$_load
(slice, ((int, int, slice, slice))) $TransferNotification$_load(slice sc_0) inline;

;; $Validate$_load
(slice, ((slice, int, slice))) $Validate$_load(slice sc_0) inline;

;; $Invest$_load
(slice, ((int))) $Invest$_load(slice sc_0) inline;

;; $Invested$_store
builder $Invested$_store(builder build_0, (int, slice) v) inline;

;; $Invested$_store_cell
cell $Invested$_store_cell((int, slice) v) inline;

;; $Voted$_store
builder $Voted$_store(builder build_0, (int, slice) v) inline;

;; $Voted$_store_cell
cell $Voted$_store_cell((int, slice) v) inline;

;; $Withdrawn$_store
builder $Withdrawn$_store(builder build_0, (int, slice) v) inline;

;; $Withdrawn$_store_cell
cell $Withdrawn$_store_cell((int, slice) v) inline;

;; $AddInvest$_store
builder $AddInvest$_store(builder build_0, (int, int) v) inline;

;; $AddInvest$_store_cell
cell $AddInvest$_store_cell((int, int) v) inline;

;; $IncomeAdded$_store
builder $IncomeAdded$_store(builder build_0, (int, slice) v) inline;

;; $IncomeAdded$_store_cell
cell $IncomeAdded$_store_cell((int, slice) v) inline;

;; $UserWithdraw$_load
(slice, ((slice, int, int, int))) $UserWithdraw$_load(slice sc_0) inline;

;; $GetIncome$_store
builder $GetIncome$_store(builder build_0, (int, int) v) inline;

;; $GetIncome$_store_cell
cell $GetIncome$_store_cell((int, int) v) inline;

;; $Project$_store
builder $Project$_store(builder build_0, (slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) v) inline;

;; $Project$_load
(slice, ((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell))) $Project$_load(slice sc_0) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $ProjectData$_to_external
(int, int, int, int, int, slice, int, int, (slice, slice, slice, slice)) $ProjectData$_to_external(((int, int, int, int, int, slice, int, int, (slice, slice, slice, slice))) v) inline;

;; $Project$init$_load
(slice, ((slice, int))) $Project$init$_load(slice sc_0) inline;

;; $UserData$init$_store
builder $UserData$init$_store(builder build_0, (slice, int, slice) v) inline;

;; $Data$_constructor_title_description_image_link
((slice, slice, slice, slice)) $Data$_constructor_title_description_image_link(slice $title, slice $description, slice $image, slice $link) inline;

;; $Project$_contract_init
(slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) $Project$_contract_init(slice $deployer, int $id) impure inline_ref;

;; $Project$_contract_load
(slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) $Project$_contract_load() impure inline_ref;

;; $Project$_contract_store
() $Project$_contract_store((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $global_emit
() $global_emit(cell $body) impure inline;

;; $Context$_fun_readForwardFee
int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure inline_ref;

;; $ProjectData$_constructor_voted_invested_required_withdrawn_income_owner_stage_id_data
((int, int, int, int, int, slice, int, int, (slice, slice, slice, slice))) $ProjectData$_constructor_voted_invested_required_withdrawn_income_owner_stage_id_data(int $voted, int $invested, int $required, int $withdrawn, int $income, slice $owner, int $stage, int $id, (slice, slice, slice, slice) $data) inline;

;; $Project$_fun_projectData
((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell), (int, int, int, int, int, slice, int, int, (slice, slice, slice, slice))) $Project$_fun_projectData((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) $self) impure inline_ref;

;; $UserData$_init_child
(cell, cell) $UserData$_init_child(cell sys', slice $owner, int $projectId, slice $deployer) inline_ref;

;; $Project$_fun_userData
((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell), slice) $Project$_fun_userData((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) $self, slice $owner) impure inline_ref;

;; $NewProject$_constructor_address_id_data_owner_required_percents
((slice, int, (slice, slice, slice, slice), slice, int, cell)) $NewProject$_constructor_address_id_data_owner_required_percents(slice $address, int $id, (slice, slice, slice, slice) $data, slice $owner, int $required, cell $percents) inline;

;; $StageChanged$_constructor_stage
((int)) $StageChanged$_constructor_stage(int $stage) inline;

;; $Withdrawn$_constructor_amount_from
((int, slice)) $Withdrawn$_constructor_amount_from(int $amount, slice $from) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;

;; $IncomeAdded$_constructor_amount_from
((int, slice)) $IncomeAdded$_constructor_amount_from(int $amount, slice $from) inline;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $CheckWallet$_constructor_wallet_amount_sender
((slice, slice, int)) $CheckWallet$_constructor_wallet_amount_sender(slice $wallet, int $amount, slice $sender) inline;

;; $Voted$_constructor_amount_from
((int, slice)) $Voted$_constructor_amount_from(int $amount, slice $from) inline;

;; $SendParameters$_constructor_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body_code_data(slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline;

;; $AddInvest$_constructor_invested_voted
((int, int)) $AddInvest$_constructor_invested_voted(int $invested, int $voted) inline;

;; $Invested$_constructor_amount_from
((int, slice)) $Invested$_constructor_amount_from(int $amount, slice $from) inline;

;; $GetIncome$_constructor_income_withdrawnAt
((int, int)) $GetIncome$_constructor_income_withdrawnAt(int $income, int $withdrawnAt) inline;
