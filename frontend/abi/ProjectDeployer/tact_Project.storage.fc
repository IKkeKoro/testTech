;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body_code_data(slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Data
;; TLB: _ title:^string description:^string image:^string link:^string = Data
;;

builder $Data$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'title, v'description, v'image, v'link) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'title).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'description).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'image).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'link).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice))) $Data$_load(slice sc_0) inline {
    var v'title = sc_0~load_ref().begin_parse();
    var v'description = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'image = sc_1~load_ref().begin_parse();
    var v'link = sc_1~load_ref().begin_parse();
    return (sc_0, (v'title, v'description, v'image, v'link));
}

((slice, slice, slice, slice)) $Data$_constructor_title_description_image_link(slice $title, slice $description, slice $image, slice $link) inline {
    return ($title, $description, $image, $link);
}

;;
;; Type: NewProject
;; Header: 0x57350805
;; TLB: new_project#57350805 address:address id:uint64 data:Data{title:^string,description:^string,image:^string,link:^string} owner:address required:coins percents:dict<int, int> = NewProject
;;

builder $NewProject$_store(builder build_0, (slice, int, (slice, slice, slice, slice), slice, int, cell) v) inline_ref {
    var (v'address, v'id, (v'data'title, v'data'description, v'data'image, v'data'link), v'owner, v'required, v'percents) = v;
    build_0 = store_uint(build_0, 1463093253, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_uint(v'id, 64);
    var build_1 = begin_cell();
    build_1 = $Data$_store(build_1, (v'data'title, v'data'description, v'data'image, v'data'link));
    build_1 = __tact_store_address(build_1, v'owner);
    build_1 = build_1.store_coins(v'required);
    build_1 = build_1.store_dict(v'percents);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $NewProject$_store_cell((slice, int, (slice, slice, slice, slice), slice, int, cell) v) inline {
    return $NewProject$_store(begin_cell(), v).end_cell();
}

((slice, int, (slice, slice, slice, slice), slice, int, cell)) $NewProject$_constructor_address_id_data_owner_required_percents(slice $address, int $id, (slice, slice, slice, slice) $data, slice $owner, int $required, cell $percents) inline {
    return ($address, $id, $data, $owner, $required, $percents);
}

;;
;; Type: DeployProject
;; Header: 0x00af0154
;; TLB: deploy_project#00af0154 data:Data{title:^string,description:^string,image:^string,link:^string} required:coins percents:dict<int, int> owner:address = DeployProject
;;

(slice, (((slice, slice, slice, slice), int, cell, slice))) $DeployProject$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 11469140);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'data = sc_1~$Data$_load();
    var v'required = sc_1~load_coins();
    var v'percents = sc_1~load_dict();
    var v'owner = sc_1~__tact_load_address();
    return (sc_0, (v'data, v'required, v'percents, v'owner));
}

;;
;; Type: StageChanged
;; Header: 0xa2d30f85
;; TLB: stage_changed#a2d30f85 stage:uint8 = StageChanged
;;

builder $StageChanged$_store(builder build_0, (int) v) inline {
    var (v'stage) = v;
    build_0 = store_uint(build_0, 2731741061, 32);
    build_0 = build_0.store_uint(v'stage, 8);
    return build_0;
}

cell $StageChanged$_store_cell((int) v) inline {
    return $StageChanged$_store(begin_cell(), v).end_cell();
}

((int)) $StageChanged$_constructor_stage(int $stage) inline {
    return ($stage);
}

;;
;; Type: CheckWallet
;; Header: 0x842ee465
;; TLB: check_wallet#842ee465 wallet:address sender:address amount:coins = CheckWallet
;;

builder $CheckWallet$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'wallet, v'sender, v'amount) = v;
    build_0 = store_uint(build_0, 2217665637, 32);
    build_0 = __tact_store_address(build_0, v'wallet);
    build_0 = __tact_store_address(build_0, v'sender);
    build_0 = build_0.store_coins(v'amount);
    return build_0;
}

cell $CheckWallet$_store_cell((slice, slice, int) v) inline {
    return $CheckWallet$_store(begin_cell(), v).end_cell();
}

((slice, slice, int)) $CheckWallet$_constructor_wallet_amount_sender(slice $wallet, int $amount, slice $sender) inline {
    return ($wallet, $sender, $amount);
}

;;
;; Type: ChangeStage
;; Header: 0x22a535d3
;; TLB: change_stage#22a535d3 stage:uint8 = ChangeStage
;;

(slice, ((int))) $ChangeStage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 581252563);
    var v'stage = sc_0~load_uint(8);
    return (sc_0, (v'stage));
}

;;
;; Type: OwnerWithdraw
;; Header: 0xf16b8c67
;; TLB: owner_withdraw#f16b8c67 amount:coins = OwnerWithdraw
;;

(slice, ((int))) $OwnerWithdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 4050357351);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: AddIncome
;; Header: 0x3815f1a9
;; TLB: add_income#3815f1a9 ownerPie:bool amount:coins = AddIncome
;;

(slice, ((int, int))) $AddIncome$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 940962217);
    var v'ownerPie = sc_0~load_int(1);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'ownerPie, v'amount));
}

;;
;; Type: TransferNotification
;; Header: 0x7362d09c
;; TLB: transfer_notification#7362d09c query_id:uint64 amount:coins sender:address forward_payload:remainder<slice> = TransferNotification
;;

(slice, ((int, int, slice, slice))) $TransferNotification$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1935855772);
    var v'query_id = sc_0~load_uint(64);
    var v'amount = sc_0~load_coins();
    var v'sender = sc_0~__tact_load_address();
    var v'forward_payload = sc_0;
    return (sc_0, (v'query_id, v'amount, v'sender, v'forward_payload));
}

;;
;; Type: Validate
;; Header: 0x58bb0635
;; TLB: validate#58bb0635 sender:address amount:coins wallet:address = Validate
;;

(slice, ((slice, int, slice))) $Validate$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1488651829);
    var v'sender = sc_0~__tact_load_address();
    var v'amount = sc_0~load_coins();
    var v'wallet = sc_0~__tact_load_address();
    return (sc_0, (v'sender, v'amount, v'wallet));
}

;;
;; Type: Invest
;; Header: 0xec31feb7
;; TLB: invest#ec31feb7 amount:coins = Invest
;;

(slice, ((int))) $Invest$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3962699447);
    var v'amount = sc_0~load_coins();
    return (sc_0, (v'amount));
}

;;
;; Type: ProjectData
;; TLB: _ voted:coins invested:coins required:coins withdrawn:coins income:coins owner:address id:uint64 stage:uint8 data:Data{title:^string,description:^string,image:^string,link:^string} = ProjectData
;;

(int, int, int, int, int, slice, int, int, (slice, slice, slice, slice)) $ProjectData$_to_external(((int, int, int, int, int, slice, int, int, (slice, slice, slice, slice))) v) inline {
    var (v'voted, v'invested, v'required, v'withdrawn, v'income, v'owner, v'id, v'stage, v'data) = v; 
    return (v'voted, v'invested, v'required, v'withdrawn, v'income, v'owner, v'id, v'stage, v'data);
}

((int, int, int, int, int, slice, int, int, (slice, slice, slice, slice))) $ProjectData$_constructor_voted_invested_required_withdrawn_income_owner_stage_id_data(int $voted, int $invested, int $required, int $withdrawn, int $income, slice $owner, int $stage, int $id, (slice, slice, slice, slice) $data) inline {
    return ($voted, $invested, $required, $withdrawn, $income, $owner, $id, $stage, $data);
}

;;
;; Type: Invested
;; Header: 0x93375105
;; TLB: invested#93375105 amount:coins from:address = Invested
;;

builder $Invested$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'from) = v;
    build_0 = store_uint(build_0, 2469875973, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    return build_0;
}

cell $Invested$_store_cell((int, slice) v) inline {
    return $Invested$_store(begin_cell(), v).end_cell();
}

((int, slice)) $Invested$_constructor_amount_from(int $amount, slice $from) inline {
    return ($amount, $from);
}

;;
;; Type: Voted
;; Header: 0x33e14342
;; TLB: voted#33e14342 amount:coins from:address = Voted
;;

builder $Voted$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'from) = v;
    build_0 = store_uint(build_0, 870400834, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    return build_0;
}

cell $Voted$_store_cell((int, slice) v) inline {
    return $Voted$_store(begin_cell(), v).end_cell();
}

((int, slice)) $Voted$_constructor_amount_from(int $amount, slice $from) inline {
    return ($amount, $from);
}

;;
;; Type: Withdrawn
;; Header: 0x45709846
;; TLB: withdrawn#45709846 amount:coins from:address = Withdrawn
;;

builder $Withdrawn$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'from) = v;
    build_0 = store_uint(build_0, 1165006918, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    return build_0;
}

cell $Withdrawn$_store_cell((int, slice) v) inline {
    return $Withdrawn$_store(begin_cell(), v).end_cell();
}

((int, slice)) $Withdrawn$_constructor_amount_from(int $amount, slice $from) inline {
    return ($amount, $from);
}

;;
;; Type: AddInvest
;; Header: 0xcf7fb2d3
;; TLB: add_invest#cf7fb2d3 invested:coins voted:coins = AddInvest
;;

builder $AddInvest$_store(builder build_0, (int, int) v) inline {
    var (v'invested, v'voted) = v;
    build_0 = store_uint(build_0, 3481252563, 32);
    build_0 = build_0.store_coins(v'invested);
    build_0 = build_0.store_coins(v'voted);
    return build_0;
}

cell $AddInvest$_store_cell((int, int) v) inline {
    return $AddInvest$_store(begin_cell(), v).end_cell();
}

((int, int)) $AddInvest$_constructor_invested_voted(int $invested, int $voted) inline {
    return ($invested, $voted);
}

;;
;; Type: IncomeAdded
;; Header: 0x27b62596
;; TLB: income_added#27b62596 amount:coins from:address = IncomeAdded
;;

builder $IncomeAdded$_store(builder build_0, (int, slice) v) inline {
    var (v'amount, v'from) = v;
    build_0 = store_uint(build_0, 666248598, 32);
    build_0 = build_0.store_coins(v'amount);
    build_0 = __tact_store_address(build_0, v'from);
    return build_0;
}

cell $IncomeAdded$_store_cell((int, slice) v) inline {
    return $IncomeAdded$_store(begin_cell(), v).end_cell();
}

((int, slice)) $IncomeAdded$_constructor_amount_from(int $amount, slice $from) inline {
    return ($amount, $from);
}

;;
;; Type: UserWithdraw
;; Header: 0x37487c77
;; TLB: user_withdraw#37487c77 from:address withdrawnAt:coins voted:coins invested:coins = UserWithdraw
;;

(slice, ((slice, int, int, int))) $UserWithdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 927497335);
    var v'from = sc_0~__tact_load_address();
    var v'withdrawnAt = sc_0~load_coins();
    var v'voted = sc_0~load_coins();
    var v'invested = sc_0~load_coins();
    return (sc_0, (v'from, v'withdrawnAt, v'voted, v'invested));
}

;;
;; Type: GetIncome
;; Header: 0x05dac8a8
;; TLB: get_income#05dac8a8 income:coins withdrawnAt:coins = GetIncome
;;

builder $GetIncome$_store(builder build_0, (int, int) v) inline {
    var (v'income, v'withdrawnAt) = v;
    build_0 = store_uint(build_0, 98224296, 32);
    build_0 = build_0.store_coins(v'income);
    build_0 = build_0.store_coins(v'withdrawnAt);
    return build_0;
}

cell $GetIncome$_store_cell((int, int) v) inline {
    return $GetIncome$_store(begin_cell(), v).end_cell();
}

((int, int)) $GetIncome$_constructor_income_withdrawnAt(int $income, int $withdrawnAt) inline {
    return ($income, $withdrawnAt);
}

;;
;; Type: Project
;;

builder $Project$_store(builder build_0, (slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) v) inline {
    var (v'deployer, v'id, v'owner, (v'data'title, v'data'description, v'data'image, v'data'link), v'voted, v'invested, v'required, v'withdrawn, v'income, v'stage, v'percents) = v;
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_uint(v'id, 64);
    build_0 = __tact_store_address(build_0, v'owner);
    var build_1 = begin_cell();
    build_1 = $Data$_store(build_1, (v'data'title, v'data'description, v'data'image, v'data'link));
    build_1 = build_1.store_coins(v'voted);
    build_1 = build_1.store_coins(v'invested);
    build_1 = build_1.store_coins(v'required);
    build_1 = build_1.store_coins(v'withdrawn);
    build_1 = build_1.store_coins(v'income);
    build_1 = build_1.store_uint(v'stage, 8);
    build_1 = build_1.store_dict(v'percents);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell))) $Project$_load(slice sc_0) inline {
    var v'deployer = sc_0~__tact_load_address();
    var v'id = sc_0~load_uint(64);
    var v'owner = sc_0~__tact_load_address();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'data = sc_1~$Data$_load();
    var v'voted = sc_1~load_coins();
    var v'invested = sc_1~load_coins();
    var v'required = sc_1~load_coins();
    var v'withdrawn = sc_1~load_coins();
    var v'income = sc_1~load_coins();
    var v'stage = sc_1~load_uint(8);
    var v'percents = sc_1~load_dict();
    return (sc_0, (v'deployer, v'id, v'owner, v'data, v'voted, v'invested, v'required, v'withdrawn, v'income, v'stage, v'percents));
}

(slice, ((slice, int))) $Project$init$_load(slice sc_0) inline {
    var v'deployer = sc_0~__tact_load_address();
    var v'id = sc_0~load_int(257);
    return (sc_0, (v'deployer, v'id));
}

(slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) $Project$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Project$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $deployer, int $id) = $sc~$Project$init$_load();
        $sc.end_parse();
        return $Project$_contract_init($deployer, $id);
    }
}

() $Project$_contract_store((slice, int, slice, (slice, slice, slice, slice), int, int, int, int, int, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Project$_store(b, v);
    set_data(b.end_cell());
}

;;
;; Type: UserData
;;

builder $UserData$init$_store(builder build_0, (slice, int, slice) v) inline {
    var (v'owner, v'projectId, v'deployer) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'projectId, 257);
    build_0 = __tact_store_address(build_0, v'deployer);
    return build_0;
}

(cell, cell) $UserData$_init_child(cell sys', slice $owner, int $projectId, slice $deployer) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: UserData
    cell mine = __tact_dict_get_code(source, 10761);
    contracts = __tact_dict_set_code(contracts, 10761, mine);
    
    ;; Contract Code: Project
    cell code_31206 = __tact_dict_get_code(source, 31206);
    contracts = __tact_dict_set_code(contracts, 31206, code_31206);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $UserData$init$_store(b, ($owner, $projectId, $deployer));
    return (mine, b.end_cell());
}