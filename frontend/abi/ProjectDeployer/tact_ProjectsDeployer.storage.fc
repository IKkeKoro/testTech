;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: Context
;; TLB: _ bounced:bool sender:address value:int257 raw:^slice = Context
;;

_ $Context$_get_value((int, slice, int, slice) v) inline {
    var (v'bounced, v'sender, v'value, v'raw) = v;
    return v'value;
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body_data_code(slice $to, int $value, int $mode, cell $body, cell $data, cell $code) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Data
;; TLB: _ title:^string description:^string image:^string link:^string = Data
;;

builder $Data$_store(builder build_0, (slice, slice, slice, slice) v) inline {
    var (v'title, v'description, v'image, v'link) = v;
    build_0 = build_0.store_ref(begin_cell().store_slice(v'title).end_cell());
    build_0 = build_0.store_ref(begin_cell().store_slice(v'description).end_cell());
    var build_1 = begin_cell();
    build_1 = build_1.store_ref(begin_cell().store_slice(v'image).end_cell());
    build_1 = build_1.store_ref(begin_cell().store_slice(v'link).end_cell());
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, slice, slice, slice))) $Data$_load(slice sc_0) inline {
    var v'title = sc_0~load_ref().begin_parse();
    var v'description = sc_0~load_ref().begin_parse();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'image = sc_1~load_ref().begin_parse();
    var v'link = sc_1~load_ref().begin_parse();
    return (sc_0, (v'title, v'description, v'image, v'link));
}

;;
;; Type: DeployDonation
;; Header: 0xef6f5d2a
;; TLB: deploy_donation#ef6f5d2a data:Data{title:^string,description:^string,image:^string,link:^string} owner:address = DeployDonation
;;

builder $DeployDonation$_store(builder build_0, ((slice, slice, slice, slice), slice) v) inline {
    var ((v'data'title, v'data'description, v'data'image, v'data'link), v'owner) = v;
    build_0 = store_uint(build_0, 4017052970, 32);
    build_0 = $Data$_store(build_0, (v'data'title, v'data'description, v'data'image, v'data'link));
    build_0 = __tact_store_address(build_0, v'owner);
    return build_0;
}

cell $DeployDonation$_store_cell(((slice, slice, slice, slice), slice) v) inline {
    return $DeployDonation$_store(begin_cell(), v).end_cell();
}

(((slice, slice, slice, slice), slice)) $DeployDonation$_constructor_owner_data(slice $owner, (slice, slice, slice, slice) $data) inline {
    return ($data, $owner);
}

;;
;; Type: DeployerData
;; TLB: _ owner:address projectId:uint64 donationId:uint64 projectPrice:coins balance:coins master:address = DeployerData
;;

(slice, int, int, int, int, slice) $DeployerData$_to_external(((slice, int, int, int, int, slice)) v) inline {
    var (v'owner, v'projectId, v'donationId, v'projectPrice, v'balance, v'master) = v; 
    return (v'owner, v'projectId, v'donationId, v'projectPrice, v'balance, v'master);
}

((slice, int, int, int, int, slice)) $DeployerData$_constructor_owner_projectId_donationId_projectPrice_master_balance(slice $owner, int $projectId, int $donationId, int $projectPrice, slice $master, int $balance) inline {
    return ($owner, $projectId, $donationId, $projectPrice, $balance, $master);
}

;;
;; Type: NewProject
;; Header: 0x57350805
;; TLB: new_project#57350805 address:address id:uint64 data:Data{title:^string,description:^string,image:^string,link:^string} owner:address required:coins percents:dict<int, int> = NewProject
;;

builder $NewProject$_store(builder build_0, (slice, int, (slice, slice, slice, slice), slice, int, cell) v) inline_ref {
    var (v'address, v'id, (v'data'title, v'data'description, v'data'image, v'data'link), v'owner, v'required, v'percents) = v;
    build_0 = store_uint(build_0, 1463093253, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_uint(v'id, 64);
    var build_1 = begin_cell();
    build_1 = $Data$_store(build_1, (v'data'title, v'data'description, v'data'image, v'data'link));
    build_1 = __tact_store_address(build_1, v'owner);
    build_1 = build_1.store_coins(v'required);
    build_1 = build_1.store_dict(v'percents);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $NewProject$_store_cell((slice, int, (slice, slice, slice, slice), slice, int, cell) v) inline {
    return $NewProject$_store(begin_cell(), v).end_cell();
}

((slice, int, (slice, slice, slice, slice), slice, int, cell)) $NewProject$_constructor_address_id_data_owner_required_percents(slice $address, int $id, (slice, slice, slice, slice) $data, slice $owner, int $required, cell $percents) inline {
    return ($address, $id, $data, $owner, $required, $percents);
}

;;
;; Type: NewDonation
;; Header: 0xc83f5563
;; TLB: new_donation#c83f5563 address:address id:uint64 owner:address data:Data{title:^string,description:^string,image:^string,link:^string} = NewDonation
;;

builder $NewDonation$_store(builder build_0, (slice, int, slice, (slice, slice, slice, slice)) v) inline {
    var (v'address, v'id, v'owner, (v'data'title, v'data'description, v'data'image, v'data'link)) = v;
    build_0 = store_uint(build_0, 3359593827, 32);
    build_0 = __tact_store_address(build_0, v'address);
    build_0 = build_0.store_uint(v'id, 64);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = $Data$_store(build_0, (v'data'title, v'data'description, v'data'image, v'data'link));
    return build_0;
}

cell $NewDonation$_store_cell((slice, int, slice, (slice, slice, slice, slice)) v) inline {
    return $NewDonation$_store(begin_cell(), v).end_cell();
}

((slice, int, slice, (slice, slice, slice, slice))) $NewDonation$_constructor_address_id_owner_data(slice $address, int $id, slice $owner, (slice, slice, slice, slice) $data) inline {
    return ($address, $id, $owner, $data);
}

;;
;; Type: ChangeOwner
;; Header: 0x85a24005
;; TLB: change_owner#85a24005 owner:address = ChangeOwner
;;

(slice, ((slice))) $ChangeOwner$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2242002949);
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'owner));
}

;;
;; Type: ChangeActive
;; Header: 0x41c3d5cb
;; TLB: change_active#41c3d5cb active:bool = ChangeActive
;;

builder $ChangeActive$_store(builder build_0, (int) v) inline {
    var (v'active) = v;
    build_0 = store_uint(build_0, 1103353291, 32);
    build_0 = build_0.store_int(v'active, 1);
    return build_0;
}

cell $ChangeActive$_store_cell((int) v) inline {
    return $ChangeActive$_store(begin_cell(), v).end_cell();
}

(slice, ((int))) $ChangeActive$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1103353291);
    var v'active = sc_0~load_int(1);
    return (sc_0, (v'active));
}

((int)) $ChangeActive$_constructor_active(int $active) inline {
    return ($active);
}

;;
;; Type: ChangePrice
;; Header: 0xd5850a0c
;; TLB: change_price#d5850a0c projectPrice:coins = ChangePrice
;;

(slice, ((int))) $ChangePrice$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3582265868);
    var v'projectPrice = sc_0~load_coins();
    return (sc_0, (v'projectPrice));
}

;;
;; Type: Withdraw
;; Header: 0x49dd9119
;; TLB: withdraw#49dd9119 query_id:uint64 = Withdraw
;;

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1239257369);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: StageManage
;; Header: 0x59ac100f
;; TLB: stage_manage#59ac100f id:uint64 stage:uint8 = StageManage
;;

(slice, ((int, int))) $StageManage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1504448527);
    var v'id = sc_0~load_uint(64);
    var v'stage = sc_0~load_uint(8);
    return (sc_0, (v'id, v'stage));
}

;;
;; Type: ActiveManage
;; Header: 0x61c036aa
;; TLB: active_manage#61c036aa active:bool id:uint64 = ActiveManage
;;

(slice, ((int, int))) $ActiveManage$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1639986858);
    var v'active = sc_0~load_int(1);
    var v'id = sc_0~load_uint(64);
    return (sc_0, (v'active, v'id));
}

;;
;; Type: CreateProject
;; Header: 0x66804c5a
;; TLB: create_project#66804c5a data:Data{title:^string,description:^string,image:^string,link:^string} required:coins percents:dict<int, int> owner:address = CreateProject
;;

(slice, (((slice, slice, slice, slice), int, cell, slice))) $CreateProject$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1719684186);
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'data = sc_1~$Data$_load();
    var v'required = sc_1~load_coins();
    var v'percents = sc_1~load_dict();
    var v'owner = sc_1~__tact_load_address();
    return (sc_0, (v'data, v'required, v'percents, v'owner));
}

;;
;; Type: CreateDonation
;; Header: 0xedd03f5a
;; TLB: create_donation#edd03f5a data:Data{title:^string,description:^string,image:^string,link:^string} owner:address = CreateDonation
;;

(slice, (((slice, slice, slice, slice), slice))) $CreateDonation$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3989847898);
    var v'data = sc_0~$Data$_load();
    var v'owner = sc_0~__tact_load_address();
    return (sc_0, (v'data, v'owner));
}

;;
;; Type: DeployProject
;; Header: 0x00af0154
;; TLB: deploy_project#00af0154 data:Data{title:^string,description:^string,image:^string,link:^string} required:coins percents:dict<int, int> owner:address = DeployProject
;;

builder $DeployProject$_store(builder build_0, ((slice, slice, slice, slice), int, cell, slice) v) inline {
    var ((v'data'title, v'data'description, v'data'image, v'data'link), v'required, v'percents, v'owner) = v;
    build_0 = store_uint(build_0, 11469140, 32);
    var build_1 = begin_cell();
    build_1 = $Data$_store(build_1, (v'data'title, v'data'description, v'data'image, v'data'link));
    build_1 = build_1.store_coins(v'required);
    build_1 = build_1.store_dict(v'percents);
    build_1 = __tact_store_address(build_1, v'owner);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

cell $DeployProject$_store_cell(((slice, slice, slice, slice), int, cell, slice) v) inline {
    return $DeployProject$_store(begin_cell(), v).end_cell();
}

(((slice, slice, slice, slice), int, cell, slice)) $DeployProject$_constructor_owner_data_required_percents(slice $owner, (slice, slice, slice, slice) $data, int $required, cell $percents) inline {
    return ($data, $required, $percents, $owner);
}

;;
;; Type: ChangeStage
;; Header: 0x22a535d3
;; TLB: change_stage#22a535d3 stage:uint8 = ChangeStage
;;

builder $ChangeStage$_store(builder build_0, (int) v) inline {
    var (v'stage) = v;
    build_0 = store_uint(build_0, 581252563, 32);
    build_0 = build_0.store_uint(v'stage, 8);
    return build_0;
}

cell $ChangeStage$_store_cell((int) v) inline {
    return $ChangeStage$_store(begin_cell(), v).end_cell();
}

((int)) $ChangeStage$_constructor_stage(int $stage) inline {
    return ($stage);
}

;;
;; Type: Project
;;

builder $Project$init$_store(builder build_0, (slice, int) v) inline {
    var (v'deployer, v'id) = v;
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_int(v'id, 257);
    return build_0;
}

(cell, cell) $Project$_init_child(cell sys', slice $deployer, int $id) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Project
    cell mine = __tact_dict_get_code(source, 31206);
    contracts = __tact_dict_set_code(contracts, 31206, mine);
    
    ;; Contract Code: UserData
    cell code_10761 = __tact_dict_get_code(source, 10761);
    contracts = __tact_dict_set_code(contracts, 10761, code_10761);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Project$init$_store(b, ($deployer, $id));
    return (mine, b.end_cell());
}

;;
;; Type: Donation
;;

builder $Donation$init$_store(builder build_0, (slice, int) v) inline {
    var (v'deployer, v'id) = v;
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_int(v'id, 257);
    return build_0;
}

(cell, cell) $Donation$_init_child(cell sys', slice $deployer, int $id) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Donation
    cell mine = __tact_dict_get_code(source, 46970);
    contracts = __tact_dict_set_code(contracts, 46970, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Donation$init$_store(b, ($deployer, $id));
    return (mine, b.end_cell());
}

;;
;; Type: ProjectsDeployer
;;

builder $ProjectsDeployer$_store(builder build_0, (int, int, slice, int, int) v) inline {
    var (v'projectId, v'donationId, v'owner, v'active, v'projectPrice) = v;
    build_0 = build_0.store_uint(v'projectId, 64);
    build_0 = build_0.store_uint(v'donationId, 64);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_int(v'active, 1);
    build_0 = build_0.store_coins(v'projectPrice);
    return build_0;
}

(slice, ((int, int, slice, int, int))) $ProjectsDeployer$_load(slice sc_0) inline {
    var v'projectId = sc_0~load_uint(64);
    var v'donationId = sc_0~load_uint(64);
    var v'owner = sc_0~__tact_load_address();
    var v'active = sc_0~load_int(1);
    var v'projectPrice = sc_0~load_coins();
    return (sc_0, (v'projectId, v'donationId, v'owner, v'active, v'projectPrice));
}

(int, int, slice, int, int) $ProjectsDeployer$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$ProjectsDeployer$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        return $ProjectsDeployer$_contract_init();
    }
}

() $ProjectsDeployer$_contract_store((int, int, slice, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $ProjectsDeployer$_store(b, v);
    set_data(b.end_cell());
}