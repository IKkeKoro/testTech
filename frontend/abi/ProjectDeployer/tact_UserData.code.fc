#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_UserData.headers.fc";
#include "tact_UserData.stdlib.fc";
#include "tact_UserData.storage.fc";

;;
;; Contract UserData functions
;;

(slice, int, slice, int, int, int, int) $UserData$_contract_init(slice $owner, int $projectId, slice $deployer) impure inline_ref {
    var (($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome)) = (null(), null(), null(), 0, 0, 0, 0);
    $self'projectId = $projectId;
    $self'owner = $owner;
    $self'deployer = $deployer;
    return ($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome);
}

((slice, int, slice, int, int, int, int), (int, int, int, int, slice, int)) $UserData$_fun_data((slice, int, slice, int, int, int, int) $self) impure inline_ref {
    var (($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome)) = $self;
    var $fresh$ret_17 = $UserInfo$_constructor_invested_voted_withdrawnAt_owner_projectId_totalIncome($self'invested, $self'voted, $self'withdrawnAt, $self'owner, $self'projectId, $self'totalIncome);
    return (($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome), $fresh$ret_17);
}

;;
;; Receivers of a Contract UserData
;;

(((slice, int, slice, int, int, int, int)), ()) $UserData$_internal_binary_AddInvest((slice, int, slice, int, int, int, int) $self, (int, int) $msg) impure inline {
    var ($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome) = $self;
    var ($msg'invested, $msg'voted) = $msg;
    slice $from = $global_contractAddress($Project$_init_child(__tact_context_sys, $self'deployer, $self'projectId));
    throw_unless(61739, ( __tact_slice_eq_bits($from, __tact_context_get_sender()) ));
    $self'invested = $self'invested + $msg'invested;
    $self'voted = $self'voted + $msg'voted;
    return (($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome), ());
}

(((slice, int, slice, int, int, int, int)), ()) $UserData$_internal_binary_Withdraw((slice, int, slice, int, int, int, int) $self, (int) $msg) impure inline {
    var ($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome) = $self;
    var ($msg'query_id) = $msg;
    throw_unless(56837, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    slice $from = $global_contractAddress($Project$_init_child(__tact_context_sys, $self'deployer, $self'projectId));
    $global_send($SendParameters$_constructor_to_value_mode_body(__tact_context_get_sender(), 0, 64, $UserWithdraw$_store_cell($UserWithdraw$_constructor_from_withdrawnAt_voted_invested(__tact_context_get_sender(), $self'withdrawnAt, $self'voted, $self'invested))));
    return (($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome), ());
}

(((slice, int, slice, int, int, int, int)), ()) $UserData$_internal_binary_GetIncome((slice, int, slice, int, int, int, int) $self, (int, int) $msg) impure inline {
    var ($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome) = $self;
    var ($msg'income, $msg'withdrawnAt) = $msg;
    throw_unless(56837, ( __tact_slice_eq_bits($self'owner, __tact_context_get_sender()) ));
    $self'withdrawnAt = $msg'withdrawnAt;
    $self'totalIncome = $self'totalIncome + $msg'income;
    $global_send($SendParameters$_constructor_to_value_mode($self'owner, 0, 64));
    return (($self'owner, $self'projectId, $self'deployer, $self'invested, $self'voted, $self'withdrawnAt, $self'totalIncome), ());
}

;;
;; Get methods of a Contract UserData
;;

_ %data() method_id(100194) {
    var self = $UserData$_contract_load();
    var res = self~$UserData$_fun_data();
    return $UserInfo$_to_external(res);
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract UserData
;;

((slice, int, slice, int, int, int, int), int) $UserData$_contract_router_internal((slice, int, slice, int, int, int, int) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive AddInvest message
    if (op == 3481252563) {
        var msg = in_msg~$AddInvest$_load();
        self~$UserData$_internal_binary_AddInvest(msg);
        return (self, true);
    }
    
    ;; Receive Withdraw message
    if (op == 1239257369) {
        var msg = in_msg~$Withdraw$_load();
        self~$UserData$_internal_binary_Withdraw(msg);
        return (self, true);
    }
    
    ;; Receive GetIncome message
    if (op == 98224296) {
        var msg = in_msg~$GetIncome$_load();
        self~$UserData$_internal_binary_GetIncome(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $UserData$_contract_load();
    
    ;; Handle operation
    int handled = self~$UserData$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $UserData$_contract_store(self);
}
