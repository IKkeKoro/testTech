;;
;; Header files for UserData
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) impure inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Withdraw$_load
(slice, ((int))) $Withdraw$_load(slice sc_0) inline;

;; $AddInvest$_load
(slice, ((int, int))) $AddInvest$_load(slice sc_0) inline;

;; $UserWithdraw$_store
builder $UserWithdraw$_store(builder build_0, (slice, int, int, int) v) inline;

;; $UserWithdraw$_store_cell
cell $UserWithdraw$_store_cell((slice, int, int, int) v) inline;

;; $GetIncome$_load
(slice, ((int, int))) $GetIncome$_load(slice sc_0) inline;

;; $UserData$_store
builder $UserData$_store(builder build_0, (slice, int, slice, int, int, int, int) v) inline;

;; $UserData$_load
(slice, ((slice, int, slice, int, int, int, int))) $UserData$_load(slice sc_0) inline;

;; $UserInfo$_to_external
(int, int, int, int, slice, int) $UserInfo$_to_external(((int, int, int, int, slice, int)) v) inline;

;; $Project$init$_store
builder $Project$init$_store(builder build_0, (slice, int) v) inline;

;; $UserData$init$_load
(slice, ((slice, int, slice))) $UserData$init$_load(slice sc_0) inline;

;; $UserData$_contract_init
(slice, int, slice, int, int, int, int) $UserData$_contract_init(slice $owner, int $projectId, slice $deployer) impure inline_ref;

;; $UserData$_contract_load
(slice, int, slice, int, int, int, int) $UserData$_contract_load() impure inline_ref;

;; $UserData$_contract_store
() $UserData$_contract_store((slice, int, slice, int, int, int, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
int $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Project$_init_child
(cell, cell) $Project$_init_child(cell sys', slice $deployer, int $id) inline_ref;

;; $UserInfo$_constructor_invested_voted_withdrawnAt_owner_projectId_totalIncome
((int, int, int, int, slice, int)) $UserInfo$_constructor_invested_voted_withdrawnAt_owner_projectId_totalIncome(int $invested, int $voted, int $withdrawnAt, slice $owner, int $projectId, int $totalIncome) inline;

;; $UserData$_fun_data
((slice, int, slice, int, int, int, int), (int, int, int, int, slice, int)) $UserData$_fun_data((slice, int, slice, int, int, int, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline;

;; $UserWithdraw$_constructor_from_withdrawnAt_voted_invested
((slice, int, int, int)) $UserWithdraw$_constructor_from_withdrawnAt_voted_invested(slice $from, int $withdrawnAt, int $voted, int $invested) inline;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;
