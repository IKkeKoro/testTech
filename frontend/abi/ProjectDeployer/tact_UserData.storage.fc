;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_body(slice $to, int $value, int $mode, cell $body) inline {
    return (true, $to, $value, $mode, $body, null(), null());
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return (true, $to, $value, $mode, null(), null(), null());
}

;;
;; Type: Withdraw
;; Header: 0x49dd9119
;; TLB: withdraw#49dd9119 query_id:uint64 = Withdraw
;;

(slice, ((int))) $Withdraw$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1239257369);
    var v'query_id = sc_0~load_uint(64);
    return (sc_0, (v'query_id));
}

;;
;; Type: AddInvest
;; Header: 0xcf7fb2d3
;; TLB: add_invest#cf7fb2d3 invested:coins voted:coins = AddInvest
;;

(slice, ((int, int))) $AddInvest$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 3481252563);
    var v'invested = sc_0~load_coins();
    var v'voted = sc_0~load_coins();
    return (sc_0, (v'invested, v'voted));
}

;;
;; Type: UserWithdraw
;; Header: 0x37487c77
;; TLB: user_withdraw#37487c77 from:address withdrawnAt:coins voted:coins invested:coins = UserWithdraw
;;

builder $UserWithdraw$_store(builder build_0, (slice, int, int, int) v) inline {
    var (v'from, v'withdrawnAt, v'voted, v'invested) = v;
    build_0 = store_uint(build_0, 927497335, 32);
    build_0 = __tact_store_address(build_0, v'from);
    build_0 = build_0.store_coins(v'withdrawnAt);
    build_0 = build_0.store_coins(v'voted);
    build_0 = build_0.store_coins(v'invested);
    return build_0;
}

cell $UserWithdraw$_store_cell((slice, int, int, int) v) inline {
    return $UserWithdraw$_store(begin_cell(), v).end_cell();
}

((slice, int, int, int)) $UserWithdraw$_constructor_from_withdrawnAt_voted_invested(slice $from, int $withdrawnAt, int $voted, int $invested) inline {
    return ($from, $withdrawnAt, $voted, $invested);
}

;;
;; Type: GetIncome
;; Header: 0x05dac8a8
;; TLB: get_income#05dac8a8 income:coins withdrawnAt:coins = GetIncome
;;

(slice, ((int, int))) $GetIncome$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 98224296);
    var v'income = sc_0~load_coins();
    var v'withdrawnAt = sc_0~load_coins();
    return (sc_0, (v'income, v'withdrawnAt));
}

;;
;; Type: UserInfo
;; TLB: _ totalIncome:coins invested:coins voted:coins withdrawnAt:coins owner:address projectId:uint64 = UserInfo
;;

(int, int, int, int, slice, int) $UserInfo$_to_external(((int, int, int, int, slice, int)) v) inline {
    var (v'totalIncome, v'invested, v'voted, v'withdrawnAt, v'owner, v'projectId) = v; 
    return (v'totalIncome, v'invested, v'voted, v'withdrawnAt, v'owner, v'projectId);
}

((int, int, int, int, slice, int)) $UserInfo$_constructor_invested_voted_withdrawnAt_owner_projectId_totalIncome(int $invested, int $voted, int $withdrawnAt, slice $owner, int $projectId, int $totalIncome) inline {
    return ($totalIncome, $invested, $voted, $withdrawnAt, $owner, $projectId);
}

;;
;; Type: Project
;;

builder $Project$init$_store(builder build_0, (slice, int) v) inline {
    var (v'deployer, v'id) = v;
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_int(v'id, 257);
    return build_0;
}

(cell, cell) $Project$_init_child(cell sys', slice $deployer, int $id) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Project
    cell mine = __tact_dict_get_code(source, 31206);
    contracts = __tact_dict_set_code(contracts, 31206, mine);
    
    ;; Contract Code: UserData
    cell code_10761 = __tact_dict_get_code(source, 10761);
    contracts = __tact_dict_set_code(contracts, 10761, code_10761);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Project$init$_store(b, ($deployer, $id));
    return (mine, b.end_cell());
}

;;
;; Type: UserData
;;

builder $UserData$_store(builder build_0, (slice, int, slice, int, int, int, int) v) inline {
    var (v'owner, v'projectId, v'deployer, v'invested, v'voted, v'withdrawnAt, v'totalIncome) = v;
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_uint(v'projectId, 64);
    build_0 = __tact_store_address(build_0, v'deployer);
    build_0 = build_0.store_coins(v'invested);
    build_0 = build_0.store_coins(v'voted);
    build_0 = build_0.store_coins(v'withdrawnAt);
    var build_1 = begin_cell();
    build_1 = build_1.store_coins(v'totalIncome);
    build_0 = store_ref(build_0, build_1.end_cell());
    return build_0;
}

(slice, ((slice, int, slice, int, int, int, int))) $UserData$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'projectId = sc_0~load_uint(64);
    var v'deployer = sc_0~__tact_load_address();
    var v'invested = sc_0~load_coins();
    var v'voted = sc_0~load_coins();
    var v'withdrawnAt = sc_0~load_coins();
    slice sc_1 = sc_0~load_ref().begin_parse();
    var v'totalIncome = sc_1~load_coins();
    return (sc_0, (v'owner, v'projectId, v'deployer, v'invested, v'voted, v'withdrawnAt, v'totalIncome));
}

(slice, ((slice, int, slice))) $UserData$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'projectId = sc_0~load_int(257);
    var v'deployer = sc_0~__tact_load_address();
    return (sc_0, (v'owner, v'projectId, v'deployer));
}

(slice, int, slice, int, int, int, int) $UserData$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$UserData$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $owner, int $projectId, slice $deployer) = $sc~$UserData$init$_load();
        $sc.end_parse();
        return $UserData$_contract_init($owner, $projectId, $deployer);
    }
}

() $UserData$_contract_store((slice, int, slice, int, int, int, int) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $UserData$_store(b, v);
    set_data(b.end_cell());
}