#include "./imports/utils.fc";

(int, slice, int, int, int, int, slice, slice, cell) load_data() {
    slice ds = get_data().begin_parse();
    var (index, collection_address) = (ds~load_uint(64), ds~load_msg_addr());
    if (ds.slice_bits() > 0) {
      return (index, collection_address, ds~load_uint(2), ds~load_uint(1), ds~load_coins(), ds~load_uint(16), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
    } else {  
      return (index, collection_address, 0, 0, 0, 0, address_none(), address_none(), begin_cell().store_address_none().store_address_none().end_cell()); ;; not initialized yet
    }
}

() store_data(int index, slice collection_address, int status, 
              int ton_or_usdt, int price, int fee, slice seller_address, 
              slice buyer_address, cell addresses
              ) impure {
    set_data(
        begin_cell()
            .store_uint(index, 64)
            .store_slice(collection_address)
            .store_uint(status, 2) ;; 0 - created - 1 paid 2 - approved
            .store_uint(ton_or_usdt, 1) ;; 0 - ton 1 - usdt
            .store_coins(price)
            .store_uint(fee, 16)
            .store_slice(seller_address)
            .store_slice(buyer_address)
            .store_ref(addresses)
        .end_cell()
    ); 
}

() send_emit(int status, slice buyer_address, slice approved_by) impure inline {
  cell data = begin_cell()
              .store_uint(status, 2)
              .store_slice(buyer_address)
              .store_slice(approved_by)
            .end_cell();
  emit_log(0, data, 0);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    force_chain(sender_address);
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = muldiv(cs~load_coins(), 3, 2); ;; we use message fwd_fee for estimation of forward_payload costs


    ( int index, slice collection_address, int status, 
      int ton_or_usdt, int price, int fee, slice seller_address, 
      slice buyer_address, cell addresses
    ) = load_data();

    slice adr = addresses.begin_parse();
    slice usdt_wallet = adr~load_msg_addr();
    slice approved_by = adr~load_msg_addr(); 

    if (equal_slices(seller_address, address_none())) {
      throw_unless(error::wrong_sender(), equal_slices(collection_address, sender_address));
      addresses = begin_cell().store_slice(usdt_wallet).store_slice(approved_by).end_cell();
      store_data(index, collection_address, 0, in_msg_body~load_uint(1), in_msg_body~load_coins(), in_msg_body~load_uint(16), in_msg_body~load_msg_addr(), address_none(), addresses);
      slice usdt_master = in_msg_body~load_msg_addr();
      var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(usdt_master)
        .store_coins(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_uint(op::provide_wallet_address(), 32)
        .store_uint(0, 64)
        .store_slice(my_address())
        .store_uint(0, 1);
      send_raw_message(msg.end_cell(), 64);
      return ();
    }

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if(op == 0) { ;; cancel escrow by seller
      throw_unless(error::wrong_sender(), equal_slices(seller_address, sender_address));
      throw_unless(error::wrong_status(), status == 0);
      status = 2;
      send_emit(status, buyer_address, approved_by);
      store_data(index, collection_address, status, ton_or_usdt, price, fee, seller_address, buyer_address, addresses);
      return();
    }
    if (op == 10) { ;; approve by guarantor
      throw_unless(error::wrong_sender(), equal_slices(collection_address, sender_address));
      throw_if(error::wrong_status(), status != 1);
      int approve = in_msg_body~load_uint(1);
 
      int fee_amount = ((price * fee) / 1000);
      int income_amount = price - fee_amount;
      if(approve == 0) {
        if(ton_or_usdt == 0) {
          send_tons(collection_address, fee_amount, 0);
          send_tons(seller_address, income_amount, 0);
        } else {
          send_jettons(collection_address, 0, usdt_wallet, fee_amount, 1);
          send_jettons(seller_address, 0, usdt_wallet, income_amount, 1);
        } 
      } else {
        if(ton_or_usdt == 0) {
          send_tons(buyer_address, price, 0);
        } else {
          send_jettons(buyer_address, 0, usdt_wallet, price, 1);
        }
      }
      status = 2;
      addresses = begin_cell().store_slice(usdt_wallet).store_slice(approved_by).end_cell();
      send_emit(status, buyer_address, approved_by);
      store_data(index, collection_address, status, ton_or_usdt, price, fee, seller_address, buyer_address, addresses);
      return ();
    }
    if (op == 11) { ;; confirmation by the parties 
      throw_unless(error::wrong_sender(), ((equal_slices(seller_address, sender_address) | equal_slices(buyer_address, sender_address))));
      throw_if(error::wrong_status(), status != 1);
      if((equal_slices(approved_by, address_none()))) {
        approved_by = sender_address;
      } else {
        if(~ equal_slices(approved_by, sender_address)){
          int fee_amount = ((price * fee) / 1000);
          int income_amount = price - fee_amount;
          if(ton_or_usdt == 0) {
            send_tons(collection_address, fee_amount, 0);
            send_tons(seller_address, income_amount, 0);
          } else {
            send_jettons(collection_address, 0, usdt_wallet, fee_amount, 1);
            send_jettons(seller_address, 0, usdt_wallet, income_amount, 1);
          } 
          status = 2;  
        } 
      }
      send_emit(status, buyer_address, approved_by);
      addresses = begin_cell().store_slice(usdt_wallet).store_slice(approved_by).end_cell();
      store_data(index, collection_address, status, ton_or_usdt, price, fee, seller_address, buyer_address, addresses);
      return ();
    }
    if (op == 12) { ;; pay in tons
      throw_unless(error::wrong_payment_method(), ton_or_usdt == 0);
      throw_unless(error::wrong_amount(), msg_value > price + fwd_fee);
      throw_unless(error::wrong_status(), status == 0);
      status = 1;
      buyer_address = sender_address;
      int exceed_ton = msg_value - price - (fwd_fee * 3);
      if (exceed_ton > 0) {
        send_tons(sender_address, exceed_ton, 0);
      }
      send_emit(status, buyer_address, approved_by);
      addresses = begin_cell().store_slice(usdt_wallet).store_slice(approved_by).end_cell();
      store_data(index, collection_address, status, ton_or_usdt, price, fee, seller_address, buyer_address, addresses);
      return ();
    }
    if (op == op::transfer_notification()) { ;; pay in usdt 
      int amount = in_msg_body~load_coins(); 
      slice sender = in_msg_body~load_msg_addr();
      throw_unless(error::wrong_sender(), equal_slices(usdt_wallet, sender_address));      
      if((status != 0) | (amount < price) | (ton_or_usdt != 1)) { ;; send money back if conditions not passed
        send_jettons(sender, 0, usdt_wallet, (amount), 1);
      } else {
        status = 1;
        buyer_address = sender;
        if(amount > price) {
          send_jettons(buyer_address, 0, usdt_wallet, (amount - price), 1); ;; send back exceed amount
        }
      }
      send_emit(status, buyer_address, approved_by);
      addresses = begin_cell().store_slice(usdt_wallet).store_slice(approved_by).end_cell();
      store_data(index, collection_address, status, ton_or_usdt, price, fee, seller_address, buyer_address, addresses);
      return ();
    }
    if (op == op::take_wallet_address()) { ;; getting usdt_wallet from jetton master
      throw_unless(error::wrong_sender(), equal_slices(usdt_wallet, address_none()));
      usdt_wallet = in_msg_body~load_msg_addr(); 
      addresses = begin_cell().store_slice(usdt_wallet).store_slice(approved_by).end_cell();
      store_data(index, collection_address, status, ton_or_usdt, price, fee, seller_address, buyer_address, addresses);
      return();
    }    
    if (op == 42) { ;; guarantor send money to buyer/sender if status is aprroved = 2, on critical cases
      throw_unless(error::wrong_sender(), equal_slices(collection_address, sender_address));
      throw_unless(error::wrong_status(), status == 2);
      int buyer_or_seller = in_msg_body~load_uint(1);
      int ton_or_usdt = in_msg_body~load_uint(1);
      int amount = in_msg_body~load_coins();
      slice to_address = seller_address;
      if(buyer_or_seller == 0) {
        to_address = buyer_address;
      }
      if (ton_or_usdt == 0) {
        send_tons(to_address, amount, 0);
      } else {
        send_jettons(to_address , 0, usdt_wallet, amount, 1);
      }
      return();
    }
    throw(0xffff);
}

;;
;;  GET Methods
;;

(int, slice, int, int, int, int, slice, slice, cell) get_all_data() method_id {
  return (load_data());
}
